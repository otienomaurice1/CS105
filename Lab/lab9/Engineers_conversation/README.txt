Author: Otieno Maurice
Date:12/17/2023
Project: Engineers’ conversation comic
Contact: otienom@lafayette.edu
The design of this comic largely borrows from the example given in the sample in class. We have two engineers who are having a friendly discussion via a video call. One is a software engineer, the other is a hardware engineer. The at times they make fun of each other and at times they ask questions.  I chose this plot because personally I have not decided if I want to be a software or hardware engineer though I’m leaning towards the latter. 
The program is implemented using two three classes named Engineers conversation, hardware engineering and software engineering. The hardware and software engineering classes are subclasses of Engineers conversation. Each instance of the two subclasses is stored in a parallel array to have uniform indexing.  The two engineers have different backgrounds at a particular time with the hardware engineer having red stars and the software engineer having yellow stars. The program is specifically designed to work with 13 to 15 panes but the number of panes can be changed by the number of panes variable. Several aspects of this comic depend on that variable. In this comic we use 14 panes. Each pane should have both the software engineer and hardware engineer alternating in speech. The software engineer should display whatever he says in red while the hardware engineer should display whatever he says in blue. When the mouse hovers over the hardware engineer, the hardware engineer should speak. This involves words popping up in an ellipse in blue. At that time the software engineer should be silent. The reverse should also be true. The program should end by the software engineer hanging up and disappearing.
Generally, interactivity was too difficult to implement and was commented out. However, the code that tried to do this is still given. This project gave me an in-depth understanding of parallel arrays, inheritance and polymorphism.
Initially I wanted to have methods to determine the x and y location rather than directly check the locations in draw. This design was suspended due to errors. Instead of drawing each object individually, I figured out it would be much better to use a parallel array system and store objects in this parallel arrays. This made it much easier to create as many objects as I can and feed in different strings of text based on the array index. Consequently, several methods like the which pane and which half methods were suspended.
